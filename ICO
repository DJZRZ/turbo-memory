pragma solidity >= 0.4.22 < 0.6.0; //version to use in solidity or else being confused

contract ICO {
 
   
    
	//introducing the maximum number of tokens available for sealed
	uint public max_tokens = 1000000; //give investor confident (no unlimited inflation allowed)
    
	// conversion rate
	uint public usd_to_mytoken = 1000; //i.e. 0.1 cent USD per token
	uint public total_tokens_sold = 0;

	//mapping - This is similar to pointing two variables. Address pointing to uint type variable equity_usd.
	// You can also consider mapping as sort of associative arrays. equity_usd is the total value of investment in USD 
	// Mapping ~ dictionary
    	// We need to map the user address with his equity. To do it we will use mapping keyword followed by parenthesis, address with type
    	// And it will be followed by variables like equity_USD or equity_tokens etc. Mapping is similar to pointing one address on some other variable.
	mapping(address => uint) equity_usd;
	mapping(address => uint) equity_tokens;

    	// This function tells the equity of investor in terms of tokens purchased
	// Method to update
	// check balance in terms of token or USD
	function equity_in_tokens(address investor) view public returns (uint) {
	 	return equity_tokens[investor]; // equity_tokens is resolved with mapping defined above against the investor address.
	}

	// This funtion tells the equity of investor in US dollars
	// This function returns approximate (ceiling) value because data type is uint. 
    	function equity_in_usd(address investor) view public returns (uint) {
		return equity_usd[investor]; // equity_usd is resloved with mapping defined above. 
	}
    
   	// Purchase of tokens, accessor or getter methods for Equity in Tokens and US Dollar
	function buy_tokens(address investor, uint usd_invested) public {
		// Check the condition: if tokens are available enough 
		// require() --> check if condition is fulfilled
		// if not fulfilled, message: 'XXX'
		require(usd_invested * usd_to_mytoken + total_tokens_sold <= max_tokens, 'Token supply is not enough. Please try some less amount.');
		// else execute the code below
		uint tokens_bought = usd_invested * usd_to_mytoken;
		// update mapped data structure for equity_tokens and equity_usd
		equity_tokens[investor] += tokens_bought; 
		equity_usd[investor] = equity_tokens[investor] / usd_to_mytoken;
        	// update the amount of total sold tokens
		total_tokens_sold += tokens_bought;
	}

    	function sell_tokens(address investor, uint tokens_sold) public {
		// Check if investor has enough tokens that he is trying to sell, require() provide a msg for invalid cases
	    	require(tokens_sold <= equity_tokens[investor], 'You do not have enough token to sell. Please try some less amount.');
     		// update variables
        	equity_tokens[investor] -= tokens_sold; 
		equity_usd[investor] = equity_tokens[investor] / usd_to_mytoken; 	
        	total_tokens_sold -= tokens_sold;
	} 
   
}
